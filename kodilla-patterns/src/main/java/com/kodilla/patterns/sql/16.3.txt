CREATE TABLE ISSUESLISTS(ID SERIAL PRIMARY KEY, NAME VARCHAR(100));

CREATE TABLE USERS
(
    ID SERIAL,
    FIRSTNAME VARCHAR(50) CHARSET utf8 NOT NULL,
    LASTNAME VARCHAR(50) CHARSET utf8 NOT NULL,
    USER_ID BIGINT UNSIGNED NOT NULL
);

INSERT INTO USERS (USER_ID, FIRSTNAME, LASTNAME)
VALUES (1, 'Mietek', 'Kowalski');

INSERT INTO USERS (USER_ID, FIRSTNAME, LASTNAME)
VALUES (2, 'Adam', 'Nowak');

INSERT INTO USERS (USER_ID, FIRSTNAME, LASTNAME)
VALUES (3, 'Marek', 'Suchy');

INSERT INTO USERS (USER_ID, FIRSTNAME, LASTNAME)
VALUES (4, 'Stanislaw', 'Zabikowski');

/*  1. Zapytania maja zwracać Listę zadań z tabeli ISSUESS z dołączonymi
    do nich nazwami list zadań z tabeli ISSUESLISTS */
SELECT I.ID, IL.NAME
FROM ISSUES I
JOIN ISSUESLISTS IL ON I.ISSUESLIST_ID = IL.ID;

/*  2. Listę zadań z tabeli ISSUESS z przypisanymi do nich użytkownikami z tabeli USERS */
SELECT I.ID, U.ID
FROM ISSUES I
JOIN USERS U ON I.USER_ID_ASSIGNEDTO = U.ID;

/*  3. Imiona i nazwiska użytkowników posiadających zadania, wraz z informacją o ilości zadań, które są do nich przypisane */
SELECT U.FIRSTNAME, U.LASTNAME, COUNT(*) AS TASKS_NUMBER
FROM ISSUES I
JOIN USERS U ON U.ID = I.USER_ID_ASSIGNEDTO
GROUP BY U.FIRSTNAME, U.LASTNAME
HAVING COUNT(*) >=1;

CREATE TABLE ISSUES
(  ID SERIAL PRIMARY KEY,
   ISSUESLIST_ID BIGINT UNSIGNED NOT NULL,
   SUMMARY VARCHAR(100), DESCRIPTION VARCHAR(1000),
   USER_ID_ASSIGNEDTO BIGINT UNSIGNED NOT NULL,
   FOREIGN KEY (ISSUESLIST_ID) REFERENCES ISSUESLISTS(ID),
   FOREIGN KEY (USER_ID_ASSIGNEDTO) REFERENCES USERS(ID)
);

INSERT INTO ISSUESLISTS (NAME) VALUES ('ToDo');
INSERT INTO ISSUESLISTS (NAME) VALUES ('In progress');
INSERT INTO ISSUESLISTS (NAME) VALUES ('Done');

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'Painting', 'Painting walls', 2);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'Baking', 'Baking applepie', 1);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'Buying', 'Buying new bike', 4);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'Cooking', 'Cooking Mexican food', 3);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (1, 'Washing', 'Washing the dishes', 2);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'Building', 'Building a new house on tree', 3);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'Writing', 'Writing a book', 4);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'Cooking', 'Cooking Hungarian food', 1);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'Cleaning', 'Cleaning the car', 4);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (2, 'Selling', 'Selling old phone', 2);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'Repairing', 'Repairing car', 4);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'Writing', 'Writing a song', 2);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'Learning', 'Learning English language', 1);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'Training', 'Training martial art', 1);

INSERT INTO ISSUES (ISSUESLIST_ID, SUMMARY, DESCRIPTION, USER_ID_ASSIGNEDTO)
VALUES (3, 'Buying', 'Buying groceries', 3);

COMMIT;

SELECT ID, FIRSTNAME FROM USERS
WHERE (ID >= 4 AND ID <= 10)
   OR ID = 1;
SELECT COUNT(*) FROM USERS;















